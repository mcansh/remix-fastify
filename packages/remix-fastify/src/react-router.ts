import type {
  AppLoadContext,
  UNSAFE_MiddlewareEnabled as MiddlewareEnabled,
  unstable_InitialContext,
} from "react-router";

import type {
  HttpServer,
  GetLoadContextFunction as SharedGetLoadContextFunction,
} from "./shared";
export type { RequestHandler } from "./shared";
export { createReactRouterRequestHandler } from "./servers/react-router";

/** @deprecated this function has been renamed to createReactRouterRequestHandler */
export { createReactRouterRequestHandler as createRequestHandler } from "./servers/react-router";
export { reactRouterFastify } from "./plugins/react-router";
export type { ReactRouterFastifyOptions } from "./plugins/react-router";

type MaybePromise<T> = T | Promise<T>;

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action, such as
 * values that are generated by Express middleware like `req.session`.
 */
export type GetLoadContextFunction<Server extends HttpServer> =
  SharedGetLoadContextFunction<
    Server,
    MiddlewareEnabled extends true
      ? MaybePromise<unstable_InitialContext>
      : MaybePromise<AppLoadContext>
  >;
